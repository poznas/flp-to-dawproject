Metadata-Version: 2.1
Name: flstudio-cubase-migration
Version: 0.1.0
Summary: Tool for transferring audio arrangements between FL Studio and Cubase
Home-page: https://github.com/yourusername/flstudio-cubase-migration
Author: Your Name
Author-email: your.email@example.com
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: End Users/Desktop
Classifier: Topic :: Multimedia :: Sound/Audio
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: pyflp>=2.0.0
Requires-Dist: construct>=2.10.0
Requires-Dist: pyaaf2>=1.7.0
Requires-Dist: sortedcontainers>=2.4.0
Requires-Dist: wave>=0.0.2
Requires-Dist: numpy>=1.21.0
Requires-Dist: tqdm>=4.65.0
Requires-Dist: pathlib>=1.0.1
Requires-Dist: typing-extensions>=4.5.0
Provides-Extra: dev
Requires-Dist: black==23.11.0; extra == "dev"
Requires-Dist: pylint==3.0.2; extra == "dev"
Requires-Dist: mypy==1.7.0; extra == "dev"
Requires-Dist: isort==5.12.0; extra == "dev"
Requires-Dist: pre-commit==3.5.0; extra == "dev"
Requires-Dist: pytest>=7.4.3; extra == "dev"
Requires-Dist: pytest-cov>=4.1.0; extra == "dev"
Requires-Dist: types-tqdm>=4.65.0; extra == "dev"
Requires-Dist: types-setuptools>=68.0.0; extra == "dev"
Requires-Dist: sphinx>=7.1.0; extra == "dev"
Requires-Dist: sphinx-rtd-theme>=2.0.0; extra == "dev"

# File: README.md
# FL Studio to Cubase Migration Tool
A Python-based tool for transferring audio arrangements between FL Studio and Cubase while preserving clip positions, colors, and organization.

## Installation
[TODO: Add installation instructions]

## Usage
[TODO: Add usage instructions]

## Project Structure


flstudio_cubase_migration/
├── src/
│   ├── __init__.py
│   ├── core/
│   │   ├── __init__.py
│   │   ├── project_parser.py     # FL Studio project parsing logic
│   │   ├── audio_processor.py    # Audio file handling and processing
│   │   └── aaf_generator.py      # AAF file generation and manipulation
│   ├── models/
│   │   ├── __init__.py
│   │   ├── project.py           # Project data structures
│   │   ├── arrangement.py       # Arrangement-specific models
│   │   └── clip.py             # Audio clip data models
│   ├── utils/
│   │   ├── __init__.py
│   │   ├── file_manager.py     # File system operations
│   │   └── logger.py           # Logging configuration
│   └── config.py               # Global configuration
├── tests/
│   ├── __init__.py
│   ├── conftest.py             # PyTest configuration and shared fixtures
│   ├── test_project_parser.py  # Project parsing tests
│   ├── test_audio_processor.py # Audio processing tests
│   ├── test_aaf_generator.py   # AAF generation tests
│   ├── test_models.py         # Data model tests
│   ├── test_file_manager.py   # File system operation tests
│   ├── integration/
│   │   └── test_full_workflow.py # End-to-end workflow tests
│   └── fixtures/               # Test data and mock files
│       ├── README.md          # Fixtures documentation
│       ├── sample_project.flp
│       ├── audio_clips/
│       │   ├── clip1.wav
│       │   └── clip2.wav
│       └── expected_output/
│           └── expected_arrangement.aaf
├── examples/
│   └── sample_project/        # Example project files
├── docs/
│   └── api_reference.md       # API documentation
├── requirements.txt           # Project dependencies
├── dev-requirements.txt     # Development dependencies
├── setup.py                 # Installation configuration
├── pytest.ini              # Test configuration
├── .pylintrc              # Pylint configuration
├── mypy.ini               # Type checking configuration
└── pyproject.toml         # Code formatting and build configuration
